Placement
    An immutable set of coords representing a single omino that's actually at a location on a board.
    (Ominos are themselves always normalized to least-x and least-y)
    The call omino.placement(size,at) tries to make a placement of that omino at that location on that sized board.
    The call omino.placement(size) collects the successes and produces a list of possible placement for an omino.

cellToPlacement
    For each coords on the grid, this is the list of placements that cover it.
    Effectively, a Map<Coords,Set<Placement>>, but API's extended to:
        add(placement) which puts the placement to every Coords in it.
        remove(placement,uncoverable) which removes the placement from every Coords in it,
        and adds any newly empty cell to uncoverable

The cellToPlacement is one data struct, but is effectively the many-to-many relationship from the algo.
We can go from cell to all its placements, and we can go from a placement to all its cells. We can also determine
which cells have the fewest placements available.

Move
    This is an actual move in the "game tree" of the algorithm. It specifies a particular placement and the
    needed information to undo that placement (and possibly any follow-on moves).
    placement - the actual placement
    blocked - the placements this move makes illegal, that were hence removed from the map by this move.
    examined - the placements from immediate child moves that have already been tried but failed
    uncoverable - any *coords* that no longer have placements in the map

step
    if we have uncoverable cells
        backtrack
        return
    if we have a solution
        solution
        return
    move

move(placement)
    move.placement = placement
    map.remove(placement,mutableSet) // ignore newly empties
    for(cell in placement)
        for(remaining in cell)
            move.blocked += remaining
            map.remove(remaining,move.uncoverable)
    return move

map.add(placement)
    for(cell in placement)
        map[cell]+=placement

map.remove(placement,unreachables)
    // This placement is blocked by some other placement
    // We remove it as an option for every cell that has it
    // If that empties one of those cells, we may have actually bottomed out
    for cell in placement
        map[cell]-=placement
        if the cell has zero entries
            remove it from the map
            add it to unreachables

backtrack(move)
    put move.placement in predecessor move.examined or solver's reset list
    for each placement in move.collisions + move.examined
        map.add(placement)

pick a placement
    sort the keys by number of placements in them.
    return the placement that has the fewest placements



Given order O ominos in a W by H plane, the number of placements P = (W*H)/O, which must be an integer.
Example: pentominos in a 5x5 is P = 5. trominos in a 6x6 is P = 12.





